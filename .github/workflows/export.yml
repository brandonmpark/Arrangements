name: MuseScore Export
on:
  push:
    paths:
      - '**/*.mscx'
      - '!**/Excerpts/**'
      - '!WIP/**'
jobs:
  export-scores:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Get changed files
      id: getfile
      run: |
        git fetch origin ${{ github.event.before }}:${{ github.event.before }}
        mscxfiles=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '\.mscx$' | grep -v '/Excerpts/' | tr '\n' ' ')
        printf 'MSCXFILES=%s\n' "$mscxfiles" >> $GITHUB_ENV
    - name: Install yq
      run: |
        sudo add-apt-repository ppa:rmescandon/yq
        sudo apt update
        sudo apt install yq -y
    - name: Install MuseScore
      run: |
        wget -q https://github.com/musescore/MuseScore/releases/download/v4.1.1/MuseScore-4.1.1.232071203-x86_64.AppImage
        chmod +x MuseScore-4.1.1.232071203-x86_64.AppImage
        ./MuseScore-4.1.1.232071203-x86_64.AppImage --appimage-extract

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libjack-jackd2-0

    - name: Export Scores
      run: |
        sudo apt-get install -y xvfb zip
        for file in ${{ env.MSCXFILES }}
        do
          file = $(realpath "$file")
          
          # Extract project name and directory
          project_dir=$(dirname "$file")
          project_name=$(basename "$file" .mscx)

          # Remove old build files in the directory
          rm -rf "$project_dir/build"
          mkdir -p "$project_dir/build"

          # Create a JSON file for the batch job
         echo '[
            {
                "in": "'"$file"'",
                "out": [
                    "'"$project_dir/build/${project_name}.pdf"'",
                    ["'"$project_dir/build/${project_name} (part for ", ").pdf"'"]
                ]
            }
         ]' > job.json

         cat job.json

          # Run the batch job to create all parts
           xvfb-run -a ./squashfs-root/AppRun -j job.json > "$project_dir/musescore.log" 2>&1

          sync

          # Print the content of the log file
          echo "MuseScore log:"
          cat "$project_dir/musescore.log"

          # Print contents of build directory for debuggingÀù
          echo "Build directory: "
          ls -l "$project_dir/build"

          # Sort the parts into directories based on parts.yaml if it exists
          if [ -f "$project_dir/parts.yaml" ]; then
            for category in $(yq e 'keys | .[]' "$project_dir/parts.yaml"); do
              mkdir -p "$project_dir/build/$category"
              for part in $(yq e '.["'$category'"][]' "$project_dir/parts.yaml"); do
                mv "$project_dir/build/${project_name} (part for ${part}).pdf" "$project_dir/build/$category/${project_name}-${part}.pdf"
              done
            done
          fi

          # Create a zip file for the project
          zip -r "$project_name.zip" "$project_dir/build"
        done

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: exported-pdfs
        path: '*.zip'