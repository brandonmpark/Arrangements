name: MuseScore Export
on:
  push:
    paths:
      - '**/*.mscx'
      - '!**/Excerpts/**'
      - '!WIP/**'
jobs:
  export-scores:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Locate files
      id: getfile
      run: |
        git fetch origin ${{ github.event.before }}:${{ github.event.before }}
        mscxfiles=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '\.mscx$' | grep -v '/Excerpts/' | tr '\n' ' ')
        printf 'MSCXFILES=%s\n' "$mscxfiles" >> $GITHUB_ENV

    - name: Install MuseScore
      run: |
        wget -q https://github.com/musescore/MuseScore/releases/download/v4.2.0/MuseScore-4.2.0.233521125-x86_64.AppImage
        chmod +x MuseScore-4.2.0.233521125-x86_64.AppImage
        ./MuseScore-4.2.0.233521125-x86_64.AppImage --appimage-extract

    - name: Install dependencies
      run: |
            sudo apt-get update
            sudo apt-get install -y libjack-jackd2-0 libegl1-mesa

    - name: Export scores
      run: |
        sudo apt-get install -y xvfb zip
        for file in ${{ env.MSCXFILES }}
        do      
          # Extract project name and directory
          project_dir=$(dirname "$file")
          project_name=$(basename "$file" .mscx)

          # Remove old build files in the directory
          rm -rf "$project_dir/build"
          mkdir -p "$project_dir/build"

          # Run the batch job to create all parts
           xvfb-run -a ./squashfs-root/AppRun -P -o $project_dir/build/${project_name}.pdf $file
        done

    - name: Split PDFs
      run: |
        sudo apt-get install -y poppler-utils
        for file in ${{ env.MSCXFILES }}
        do
          project_dir=$(dirname "$file")
          project_name=$(basename "$file" .mscx)
          mkdir -p "$project_dir/build/parts"
          pdfseparate "$project_dir/build/${project_name}.pdf" "$project_dir/build/parts/${project_name}_%d.pdf"
          
          start_page=1
          part_number=1
          total_pages=$(pdfinfo "$project_dir/build/${project_name}.pdf" | awk '/Pages:/ {print $2}')
          for ((page=1; page<=total_pages; page++))
          do
            if pdftotext "$project_dir/build/parts/${project_name}_${page}.pdf" - | grep -q 'arr. Brandon Park'; then
              if [ $page -ne $start_page ]; then
                part_name=$(pdftotext "$project_dir/build/parts/${project_name}_${start_page}.pdf" - | head -n 1 | sed 's/ /_/g')
                files_to_unite=()
                for ((i=start_page; i<page; i++)); do
                  files_to_unite+=("$project_dir/build/parts/${project_name}_${i}.pdf")
                done
                pdfunite "${files_to_unite[@]}" "$project_dir/build/${project_name}_${part_name}.pdf"
                ((part_number++))
              fi
              start_page=$page
            fi
          done
          part_name=$(pdftotext "$project_dir/build/parts/${project_name}_${start_page}.pdf" - | head -n 1 | sed 's/ /_/g')
          files_to_unite=()
          for ((i=start_page; i<=total_pages; i++)); do
            files_to_unite+=("$project_dir/build/parts/${project_name}_${i}.pdf")
          done
          pdfunite "${files_to_unite[@]}" "$project_dir/build/${project_name}_${part_name}.pdf"
          rm -rf "$project_dir/build/parts"
        done

    - name: Install yq
      run: |
        sudo add-apt-repository ppa:rmescandon/yq
        sudo apt update
        sudo apt install yq -y

    - name: Sort parts
      run: |
        for file in ${{ env.MSCXFILES }}
        do
          project_dir=$(dirname "$file")
          project_name=$(basename "$file" .mscx)
          if [ -f "$project_dir/parts.yaml" ]; then
            for category in $(yq e 'keys | .[]' "$project_dir/parts.yaml"); do
              mkdir -p "$project_dir/build/$category"
              for part in $(yq e '.["'$category'"][]' "$project_dir/parts.yaml"); do
                part=$(echo "$part" | sed 's/ /_/g') # replace whitespace with underscores
                mv "$project_dir/build/${project_name}_${part}.pdf" "$project_dir/build/$category/${project_name}_${part}.pdf"
              done
            done
          fi

          zip -r "$project_name.zip" "$project_dir/build"
        done

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: exported-pdfs
        path: '*.zip'